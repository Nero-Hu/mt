#!/usr/bin/env python
import sys
import optparse
import bleu
import math
import numpy as np
from collections import Counter

def bleu_stat(s, ngram):
	"""
	Collect sentence level blue status, generally its n-gram counts and its length
	n_gram structure: [length, 1_gram_counter, ... , n_gram_counter]
	"""
	s = s.split()
	n_gram = [float(len(s))]
	for i in xrange(1, ngram + 1):
		n_gram.append(Counter([tuple(s[j:j+i]) for j in xrange(len(s)+1-i)]))

	return n_gram

def bleu_score(c_stat, r_stat, ngram):
	"""
	Compute bleu score given 2 status
	"""
	lc = c_stat[0]
	brev = min([0, 1-float(r_stat[0])/lc])
	log_prec = 0.0
	for i in xrange(1, ngram+1):
		c = max([sum((c_stat[i] & r_stat[i]).values()), 0])
		if c != 0:
			log_prec += math.log(float(c) / float(max(lc -i + 1,0)))
	return math.exp(brev + log_prec/4.0)


def main():
	optparser = optparse.OptionParser()
	optparser.add_option("-k", "--kbest-list", dest="input", default="data/dev+test.100best", help="100-best translation lists")
	optparser.add_option("-r", "--ref-list", dest="ref", default="data/dev.ref", help="reference for sentences")
	optparser.add_option("-n", "--ngram", dest="ngram", default=4, help="ngram counts")

	(opts, _) = optparser.parse_args()

	all_hyps = [pair.split(' ||| ') for pair in open(opts.input)]
	# all_ref = [r for r in open(opts.ref)]
	num_sents = len(all_hyps) / 100
	for s in xrange(0, num_sents):
		hyps_for_one_sent = all_hyps[s * 100:s * 100 + 100]
		# r_st = bleu_stat(all_ref[s], opts.ngram)
		(min_error, best) = (np.inf, '')
		h_stat = []
		posterior = np.zeros(100)
		loss = np.zeros(100)
		sumPos = 0.0
		for (n, (num, hyp, feats)) in enumerate(hyps_for_one_sent):
			# Compute bleu_stat for each hypothesis
			h_stat.append(bleu_stat(hyp, opts.ngram))
			# Compute posterior using the product of language mode, tranlation model and lexical model
			pos = 1.0
			for feat in feats.split(' '):
				pos *= float(feat.split('=')[1])
			posterior[n] = pos
			sumPos += pos
			# Summing loss for corresponding entry
			for (j, h) in enumerate(h_stat):
				loss[j] += 1.0 - bleu_score(h, h_stat[n], opts.ngram)
				loss[n] += 1.0 - bleu_score(h_stat[n], h, opts.ngram)

		posterior /= sumPos
		print hyps_for_one_sent[np.argmin(loss * posterior)][1]

if __name__ == '__main__':
	main()