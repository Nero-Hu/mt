#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
from collections import defaultdict
import stemmer
import math
import re
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-a', '--alpha', default=0.5, type=float,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-g', '--ngram', default=4, type=int,
            help='Ngram used for evaluting bleu')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
    ng = opts.ngram
    sumNg = 0.0
    for i in range(ng):
        sumNg += i+1

    stm = stemmer.Stemmer()
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]

    #Remove stop words
    stopWordList = []
    with open("eng-stop-words.txt") as f:
        for pair in f:
            stopWordList = pair.strip().split()

    def removeStopWord(inStr):
        return [re.sub(r'[^\w\s]','',removedList) for removedList in inStr if removedList not in stopWordList]

    def computeBlue(h1, h2, ref):
        #Compute brevity penalty
        bp1 = min(1.0, math.exp(1-float(len(ref))/float(len(h1))))
        bp2 = min(1.0, math.exp(1-float(len(ref))/float(len(h2))))
        #First construct n gram and its maximum counts in reference
        gDict = []
        h1Dict = []
        h2Dict = []
        for i in range(ng):
            gDict.append(defaultdict(float))
            h1Dict.append(defaultdict(float))
            h2Dict.append(defaultdict(float))

        for i in range(len(ref)):
            for j in xrange(i+1,i+ng+1):
                if j > len(ref):
                    break
                gDict[j-i-1][tuple(ref[i:j])] += 1.0

        for i in range(len(h1)):
            for j in xrange(i+1,i+ng+1):
                if j > len(h1):
                    break
                if tuple(h1[i:j]) in gDict[j-i-1].keys():
                    h1Dict[j-i-1][tuple(h1[i:j])] += 1.0
                    # modified counts
                    h1Dict[j-i-1][tuple(h1[i:j])] = min(h1Dict[j-i-1][tuple(h1[i:j])], gDict[j-i-1][tuple(h1[i:j])])
                
        
        for i in range(len(h2)):
            for j in xrange(i+1,i+ng+1):
                if j > len(h2):
                    break
                if tuple(h2[i:j]) in gDict[j-i-1].keys():
                    h2Dict[j-i-1][tuple(h2[i:j])] += 1.0
                    # modified counts
                    h2Dict[j-i-1][tuple(h2[i:j])] = min(h2Dict[j-i-1][tuple(h2[i:j])], gDict[j-i-1][tuple(h2[i:j])])
               
        p1 = bp1
        p2 = bp2
        for i in range(ng):
            # Smoothed bleu
            tp1 = (sum(h1Dict[i].values()) +1.0) / max(len(h1)-i+1.0,1.0)
            tp2 = (sum(h2Dict[i].values()) +1.0) / max(len(h2)-i+1.0,1.0)

            # tp1 = sum(h1Dict[i].values()) / max(float(len(h1)-i),1.0)
            # tp2 = sum(h2Dict[i].values()) / max(float(len(h2)-i),1.0)
            # if tp1 == 0:
            #     inv1 *= 50.0/ max(math.log(len(h1)),1.0)
            #     tp1 = 1.0 / inv1
            # if tp2 == 0:
            #     inv2 *= 50.0/max(math.log(len(h2)),1.0)
            #     tp2 = 1.0 / inv2

            # p1 *= math.pow(tp1,(ng-i)/sumNg)
            # p2 *= math.pow(tp2,(ng-i)/sumNg)
            p1 *= math.pow(tp1,1.0/ng)
            p2 *= math.pow(tp2,1.0/ng)

        return p1,p2

    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        # Compute blue score for h1 and h2, pick the higher blue score
        # ref = removeStopWord(ref)
        p1, p2 = computeBlue(h1,h2,ref)

        print(1 if p1 > p2 else # \begin{cases}
            (0 if p1 == p2
            else -1)) # \end{cases}
    

# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
