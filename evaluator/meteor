#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
 
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-a', '--alpha', default=0.9, type=float,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]

	# Calculate precision and recall, and f score
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        c1 = word_matches(h1,ref)
        c2 = word_matches(h2,ref)
        p1 = float(c1) / float(len(h1))
        p2 = float(c2) / float(len(h2))
        r1 = float(c1) / float(len(ref))
        r2 = float(c2) / float(len(ref))

        if p1 == 0 and r1 == 0:
            if p2 == 0 and r2 == 0:
                print 0
            else:
                print -1
            continue
        if p2 == 0 and r2 == 0:
            print 1
            continue
        f1 = float(p1 * r1) / float((1-opts.alpha)*r1 + opts.alpha*p1)
        f2 = float(p2 * r2) / float((1-opts.alpha)*r2 + opts.alpha*p2)
        print(1 if f1 > f2 else # \begin{cases}
            (0 if f1 == f2
            else -1)) # \end{cases}

# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
